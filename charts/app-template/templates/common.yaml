---
{{ $_ := set .Values.newTemplate "replicas" .Values.replicas }}
{{ $_ := set .Values.newTemplate "image" .Values.image }}
{{ $_ := set .Values.newTemplate "command" .Values.command }}
{{ $_ := set .Values.newTemplate "ports" .Values.ports }}
{{ $_ := set .Values.newTemplate "ingress" .Values.ingress }}
{{ $_ := set .Values.newTemplate "serviceMonitor" .Values.serviceMonitor }}
{{ $_ := set .Values.newTemplate "persistence" .Values.persistence }}
{{ $_ := set .Values.newTemplate "stateful" .Values.stateful }}
{{ $_ := set .Values.newTemplate "env" .Values.env }}

{{ $_ := unset .Values "replicas" }}
{{ $_ := unset .Values "image" }}
{{ $_ := unset .Values "command" }}
{{ $_ := unset .Values "ports" }}
{{ $_ := unset .Values "ingress" }}
{{ $_ := unset .Values "serviceMonitor" }}
{{ $_ := unset .Values "persistence" }}
{{ $_ := unset .Values "stateful" }}
{{ $_ := unset .Values "env" }}

{{- include "bjw-s.common.loader.init" . }}

{{- define "app-template.hardcodedValues" -}}

global:
  nameOverride: "{{ .Release.Name }}"

controllers:
  {{ .Release.Name }}:
    strategy: {{ ternary "Recreate" "RollingUpdate" .Values.newTemplate.stateful }}
    annotations:
      reloader.stakater.com/auto: "true"
    replicas: {{ .Values.newTemplate.replicas }}
    containers:
      {{ .Release.Name }}:
        image:
          repository: {{ .Values.newTemplate.image.repository }}
          tag: {{ .Values.newTemplate.image.tag }}
        command: {{ .Values.newTemplate.command }}
        {{ if .Values.newTemplate.env }}
        env:
          {{- range $key, $value := .Values.newTemplate.env }}
          {{ $key }}: "{{ $value }}"
          {{- end }}
        {{ end }}
        probes:
          liveness:
            enabled: true
          readiness:
            enabled: true
          startup:
            enabled: true
            spec:
              failureThreshold: 30
              periodSeconds: 5

{{- if .Values.newTemplate.ports }}
service:
  app:
    controller: {{ .Release.Name }}
    ports:
    {{- range $port := .Values.newTemplate.ports}}
      {{ $port.name }}:
        port: {{ $port.port }}
    {{- end }}
{{- end }}

serviceMonitor:
  app-test:
    serviceName: {{ .Release.Name }}
    endpoints:
      - port: {{ .Values.newTemplate.serviceMonitor.port }}
        scheme: {{ .Values.newTemplate.serviceMonitor.scheme }}
        path: {{ .Values.newTemplate.serviceMonitor.path }}
        interval: 1m
        scrapeTimeout: 10s
        {{- if .Values.newTemplate.serviceMonitor.bearerTokenSecret }}
        bearerTokenSecret:
          name: {{ .Values.newTemplate.serviceMonitor.bearerTokenSecret.name }}
          key: {{ .Values.newTemplate.serviceMonitor.bearerTokenSecret.key}}
        {{- end }}

persistence:
  {{- range $name, $config := .Values.newTemplate.persistence }}
  {{ $name }}:
    enabled: true
    {{ $config | toYaml | nindent 4 }}
  {{- end }}

{{- if .Values.newTemplate.ingress.enabled }}
ingress:
  {{ .Release.Name }}:
    enabled: true
    className: "traefik"
    {{- if .Values.newTemplate.ingress.icon }}
    annotations:
      hajimari.io/icon: {{ .Values.newTemplate.ingress.icon }}
    {{- end }}
    hosts:
      - host: {{ .Values.newTemplate.ingress.subdomain }}.deangalvin.dev
        paths:
          - path: /
            service:
              name: {{ .Release.Name }}
              port: {{ .Values.newTemplate.ingress.port }}
    tls:
      - secretName: "deangalvin-dev-production-tls"
        hosts:
        - {{ .Values.newTemplate.ingress.subdomain }}.deangalvin.dev
{{- end }}
{{- end -}}


{{- $_ := mergeOverwrite .Values (include "app-template.hardcodedValues" . | fromYaml) -}}

{{- include "bjw-s.common.loader.generate" . -}}
